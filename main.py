import logging
import os
import re
import tempfile
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import yt_dlp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB
MAX_DURATION = 30 * 60  # 30 –º–∏–Ω—É—Ç

def is_youtube_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube"""
    youtube_regex = re.compile(
        r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/'
        r'(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'
    )
    return youtube_regex.match(url) is not None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = """üéµ YouTube Audio Bot

–Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Å YouTube –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏!

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ
2. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 30 –º–∏–Ω—É—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50MB
‚Ä¢ –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."""
    
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """üìã –ü–æ–º–æ—â—å

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã YouTube:
‚Ä¢ youtube.com/watch?v=...
‚Ä¢ youtu.be/...
‚Ä¢ youtube.com/embed/...

–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ YouTube —Å—Å—ã–ª–∫—É
2. –ë–æ—Ç —Å–∫–∞—á–∞–µ—Ç –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3
3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Ñ–∞–π–ª –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É

–ü—Ä–æ–±–ª–µ–º—ã?
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∏–¥–µ–æ –ø—É–±–ª–∏—á–Ω–æ–µ
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å < 30 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    
    await update.message.reply_text(help_text)

def get_ydl_opts(temp_dir):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    return {
        'format': 'bestaudio/best',
        'outtmpl': f'{temp_dir}/%(title)s.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': True,
        'no_warnings': True,
        'max_filesize': MAX_FILE_SIZE,
        'socket_timeout': 30,
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ö–æ–¥–∞
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
            'Accept': '*/*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        },
        'extractor_args': {
            'youtube': {
                'skip': ['hls', 'dash'],
                'player_client': ['android', 'ios', 'web'],
                'player_skip': ['configs'],
                'comment_sort': ['top'],
                'max_comments': ['0']
            }
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ö–æ–¥—ã
        'sleep_interval_requests': 1,
        'sleep_interval_subtitles': 1,
        'age_limit': 18,
        'geo_bypass': True,
        'geo_bypass_country': 'US'
    }

def download_audio_sync(url, temp_dir):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ"""
    ydl_opts = get_ydl_opts(temp_dir)
    
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        
        title = info.get('title', 'Unknown')
        duration = info.get('duration', 0)
        uploader = info.get('uploader', 'Unknown')
        
        if duration > MAX_DURATION:
            raise Exception(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration//60} –º–∏–Ω). –ú–∞–∫—Å–∏–º—É–º: {MAX_DURATION//60} –º–∏–Ω")
        
        ydl.download([url])
        
        audio_files = []
        for file in os.listdir(temp_dir):
            if file.endswith(('.mp3', '.m4a', '.webm', '.wav')):
                audio_files.append(file)
        
        if not audio_files:
            raise Exception("–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        
        audio_file = os.path.join(temp_dir, audio_files[0])
        
        return {
            'file_path': audio_file,
            'title': title,
            'duration': duration,
            'uploader': uploader,
            'file_size': os.path.getsize(audio_file)
        }

async def download_youtube_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ"""
    url = update.message.text.strip()
    
    if not is_youtube_url(url):
        await update.message.reply_text(
            "‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ https://youtube.com/watch?v=...\n"
            "‚Ä¢ https://youtu.be/..."
        )
        return
    
    status_message = await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            await status_message.edit_text("üì° –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
            
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None, download_audio_sync, url, temp_dir
            )
            
            if result['file_size'] > MAX_FILE_SIZE:
                await status_message.edit_text(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({result['file_size']//1024//1024}MB)\n"
                    f"–ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE//1024//1024}MB"
                )
                return
            
            await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            
            duration_str = f"{result['duration']//60}:{result['duration']%60:02d}"
            size_str = f"{result['file_size']//1024} KB"
            
            caption = f"""üéµ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ!

üìÑ {result['title'][:80]}{'...' if len(result['title']) > 80 else ''}
üë§ {result['uploader']}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}
üìè –†–∞–∑–º–µ—Ä: {size_str}

‚û°Ô∏è –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
            
            with open(result['file_path'], 'rb') as audio_file:
                await update.message.reply_document(
                    document=audio_file,
                    filename=f"{result['title'][:50]}.mp3",
                    caption=caption
                )
            
            await status_message.delete()
            logger.info(f"Successfully processed: {result['title']} ({size_str})")
            
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error processing {url}: {error_msg}")
        
        if "Sign in to confirm" in error_msg or "bot" in error_msg.lower():
            await status_message.edit_text(
                "‚ùå YouTube –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø\n\n"
                "–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –î—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
                "‚Ä¢ –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ"
            )
        elif "Private video" in error_msg:
            await status_message.edit_text(
                "‚ùå –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ\n\n"
                "–ú–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ."
            )
        elif "—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ" in error_msg:
            await status_message.edit_text(
                f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {MAX_DURATION//60} –º–∏–Ω—É—Ç"
            )
        else:
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n\n"
                f"–î–µ—Ç–∞–ª–∏: {error_msg[:200]}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            )

async def handle_other_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "ü§î –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "https://youtube.com/watch?v=dQw4w9WgXcQ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN!")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é YouTube Audio Bot...")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r'(youtube\.com|youtu\.be)'), 
        download_youtube_audio
    ))
    
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_other_messages
    ))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
